/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/awpms0eXmvP
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"

// Add this type definition at the top of the file, after the imports
type Character = {
  id: number;
  name: string;
  description: string;
  personality: string;
};

export function Characters() {
  const [characters, setCharacters] = useState([
    {
      id: 1,
      name: "Zara the Adventurer",
      description: "A brave and curious explorer, always seeking new discoveries.",
      personality: "Adventurous, Curious, Determined",
    },
    {
      id: 2,
      name: "Finn the Tinkerer",
      description: "A creative inventor who loves building gadgets and machines.",
      personality: "Innovative, Analytical, Playful",
    },
    {
      id: 3,
      name: "Lily the Enchantress",
      description: "A powerful mage with a deep connection to the natural world.",
      personality: "Mystical, Compassionate, Mischievous",
    },
  ])
  const [showDialog, setShowDialog] = useState(false)
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null)
  const [generatedStory, setGeneratedStory] = useState("")
  const handleAddCharacter = () => {
    setSelectedCharacter(null)
    setShowDialog(true)
  }
  const handleEditCharacter = (character: Character) => {
    setSelectedCharacter(character)
    setShowDialog(true)
  }
  const handleDeleteCharacter = (id: number) => {
    setCharacters(characters.filter((char) => char.id !== id))
  }
  const handleSaveCharacter = (character: Character) => {
    if (selectedCharacter) {
      setCharacters(characters.map((char) => (char.id === character.id ? character : char)))
    } else {
      setCharacters([...characters, { ...character, id: characters.length + 1 }])
    }
    setShowDialog(false)
  }
  const handleGenerateStory = async () => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ characters }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate story');
      }
      
      const data = await response.json();
      setGeneratedStory(data.story);
    } catch (error) {
      console.error('Error generating story:', error);
      // Handle error (e.g., show error message to user)
    }
    // const story = `Once upon a time, in a world full of wonder, ${characters.map((char) => char.name).join(", ")} embarked on an extraordinary adventure. 
    
    // ${characters
    //   .map(
    //     (char) =>
    //       `${
    //         char.name
    //       }, the ${char.personality.toLowerCase()} ${char.description.toLowerCase()}, played a crucial role in the story.`,
    //   )
    //   .join("\n\n")}
    
    // Together, they faced challenges, discovered new realms, and forged unbreakable bonds. The tale of their journey will be remembered for generations to come.`
    // setGeneratedStory(story)
  }
  return (
    <div className="w-full max-w-4xl mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Character Management</h1>
        <Button onClick={handleAddCharacter}>Add Character</Button>
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Name</TableHead>
            <TableHead>Description</TableHead>
            <TableHead>Personality</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {characters.map((character) => (
            <TableRow key={character.id}>
              <TableCell>{character.name}</TableCell>
              <TableCell>{character.description}</TableCell>
              <TableCell>{character.personality}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  <Button variant="ghost" size="icon" onClick={() => handleEditCharacter(character)}>
                    <FilePenIcon className="w-4 h-4" />
                  </Button>
                  <Button variant="ghost" size="icon" onClick={() => handleDeleteCharacter(character.id)}>
                    <TrashIcon className="w-4 h-4" />
                  </Button>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      {showDialog && (
        <Dialog open={showDialog} onOpenChange={setShowDialog}>
          <DialogContent className="p-6" style={{ background: "white" }}>
            <DialogHeader>
              <DialogTitle>{selectedCharacter ? "Edit Character" : "Add Character"}</DialogTitle>
            </DialogHeader>
            <div className="grid gap-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input id="name" defaultValue={selectedCharacter?.name} placeholder="Enter character name" />
                </div>
                <div>
                  <Label htmlFor="personality">Personality</Label>
                  <Input
                    id="personality"
                    defaultValue={selectedCharacter?.personality}
                    placeholder="Enter character personality"
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  defaultValue={selectedCharacter?.description}
                  placeholder="Enter character description"
                  rows={3}
                />
              </div>
            </div>
            <DialogFooter>
              <Button
                type="submit"
                onClick={() =>
                  handleSaveCharacter({
                    id: selectedCharacter?.id ?? characters.length + 1,
                    name: (document.getElementById("name") as HTMLInputElement)?.value ?? "",
                    description: (document.getElementById("description") as HTMLTextAreaElement)?.value ?? "",
                    personality: (document.getElementById("personality") as HTMLInputElement)?.value ?? "",
                  })
                }
              >
                Save
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
      <div className="mt-8">
        <Button onClick={handleGenerateStory}>Generate Story</Button>
        {generatedStory && (
          <div className="mt-4">
            <h2 className="text-xl font-bold mb-4">Generated Story</h2>
            <div className="prose">{generatedStory}</div>
          </div>
        )}
      </div>
    </div>
  )
}

function FilePenIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  )
}


function TrashIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}
